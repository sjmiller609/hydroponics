---

- name: copy python code to device
  become: yes
  copy:
    force: yes
    owner: pi
    group: pi
    src: "{{ playbook_dir }}/monitor"
    dest: "{{ ansible_env.HOME }}/"
    directory_mode: true
    mode: u+rwx
  tags:
    - check

- name: ensure correct permissions
  become: yes
  file:
    recurse: yes
    path: "{{ ansible_env.HOME }}"
    owner: pi
    group: pi
    mode: u=rwx
  changed_when: false
  tags:
    - check

- name: install environment
  pip:
    requirements: "{{ ansible_env.HOME }}/monitor/requirements.txt"
    virtualenv: "{{ ansible_env.HOME }}/monitor/env"

- name: check for process
  register: check1
  shell: tmux capture-pane -pt "$target-pane"
  changed_when: false
  tags:
    - check
  ignore_errors: true

- pause: minutes=2
  when: check1.failed is not defined
  tags:
    - check

- name: check for process
  when: check1.failed is not defined
  register: check2
  shell: tmux capture-pane -pt "$target-pane"
  changed_when: false
  tags:
    - check

- name: comparing tmux captures
  set_fact:
    restart_necessary: '{{ check1.failed is defined or (check1.stdout == check2.stdout) }}'
  changed_when: restart_necessary
  tags:
    - check
  ignore_errors: true

- name: killing tmux if script restart is necessary
  when: restart_necessary
  shell: pkill tmux
  tags:
    - check
  ignore_errors: true

- name: starting script in tmux session
  when: restart_necessary
  shell: tmux new-session -d -s monitor "$HOME/monitor/env/bin/python -i $HOME/monitor/moisture_monitor.py"
  args:
    chdir: "{{ ansible_env.HOME }}/monitor"
  tags:
    - check


